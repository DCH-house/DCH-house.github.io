<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis--黑马点评项目初始化</title>
      <link href="/2024/03/06/Redis--%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>/2024/03/06/Redis--%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="开发短信验证登录功能"><a href="#开发短信验证登录功能" class="headerlink" title="开发短信验证登录功能"></a>开发短信验证登录功能</h4><p>开发流程：</p><img src="../images/Redis--黑马点评项目初始化/image-20240227194335725.png" alt="image-20240227194335725" style="zoom:50%;" /><h5 id="发送短信模块"><a href="#发送短信模块" class="headerlink" title="发送短信模块"></a>发送短信模块</h5><p>​当点击我的之后会弹出登录页面，要求输入手机号获取验证码，当输入手机号点击发送验证码后，通过抓包发现浏览器会发送如下报文</p><img src="../images/Redis--黑马点评项目初始化/image-20240227195645100.png" alt="image-20240227195645100" style="zoom:50%;" /><p>可以看到，浏览器会以post方式向服务器发送请求，并携带请求参数：phone&#x3D;xxx。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(String phone, HttpSession session)</span>&#123;</span><br><span class="line">        <span class="comment">//校验手机号是否合法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">phoneInvalid</span> <span class="operator">=</span> RegexUtils.isPhoneInvalid(phone);</span><br><span class="line">        <span class="comment">//如果不合法</span></span><br><span class="line">        <span class="keyword">if</span>(phoneInvalid)&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号不合法,请重新输入&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果合法，则生成验证码(一个六位数随机数),并保存在session中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> RandomUtil.randomNumbers(<span class="number">6</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;code&quot;</span>,code);</span><br><span class="line">    <span class="comment">//m</span></span><br><span class="line">        log.debug(<span class="string">&quot;成功发送验证码：&quot;</span> + code);</span><br><span class="line">        <span class="keyword">return</span> Result.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="登录模块"><a href="#登录模块" class="headerlink" title="登录模块"></a>登录模块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginFormDTO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(LoginFormDTO loginFormDTO,HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">//验证手机号是否正确</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginFormDTO.getPhone();</span><br><span class="line">    <span class="keyword">if</span>(RegexUtils.isPhoneInvalid(phone))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;手机号格式错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//验证码是否一致</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginFormDTO.getCode();</span><br><span class="line">    <span class="type">String</span> <span class="variable">cachecode</span> <span class="operator">=</span> (String)session.getAttribute(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(code == <span class="literal">null</span> || !cachecode.equals(code))&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数据库中是否有该用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> query().eq(<span class="string">&quot;phone&quot;</span>, phone).one();</span><br><span class="line">    <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">        <span class="comment">//保存用户</span></span><br><span class="line">        save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将用户保存到session中</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="校验登录"><a href="#校验登录" class="headerlink" title="校验登录"></a>校验登录</h5><img src="../images/Redis--黑马点评项目初始化/image-20240228195552226.png" alt="image-20240228195552226" style="zoom: 50%;" /><p>问题：拦截器和过滤器有什么区别？拦截器的作用是什么？为什么要使用ThreadLocal？详细介绍一下ThreadLocal？</p><p>​拦截器是SpringMVC中提供的类，也是用于拦截请求，和过滤器不同的是，它拦截的是DispatcherServlet和控制器方法之间的请求。而过滤器拦截的是用户和Servlet间的请求。而且过滤器是基于Servlet的，它只能用于web程序，而拦截器是Spring的组件，由Spring控制，不仅能用于web程序，还能用于其他程序。</p><p>​拦截器是基于java反射机制(动态代理实现的)，而过滤器是基于回调函数(doFilter方法)实现的，当一个过滤器执行完后，会调用doFilter方法返回执行上一级Filter</p><p>​鉴于两者都能够拦截请求，因此常被用来作为鉴权登录模块</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> dch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2024-02-28</span></span><br><span class="line"><span class="comment"> * 校验用户登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginInteceptorHandler</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//查看session中是否有用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//进行拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);<span class="comment">//401表示未得到授权</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.hmdp.utils.UserLoginInteceptorHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加拦截器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">UserLoginInteceptorHandler</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="comment">//放行请求，这些请求不做拦截</span></span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher-order/**&quot;</span></span><br><span class="line">                        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="如何保护用户敏感信息"><a href="#如何保护用户敏感信息" class="headerlink" title="如何保护用户敏感信息"></a>如何保护用户敏感信息</h5><img src="../images/Redis--黑马点评项目初始化/image-20240228201228430.png" alt="image-20240228201228430" style="zoom:50%;" /><p>​从图中可以看出，当前系统中，当我们登录时，会将用户的一些敏感信息暴露在浏览器中，这非常危险。因此我们需要解决该问题，那么常用的解决方案就是，定义两个用户实体，一个是数据库用户实体，另一个是返回给浏览器的用户实体，后者相对于前者缺少了用户的敏感信息，更加安全，如下图所示。</p><p><img src="/../images/Redis--%E9%BB%91%E9%A9%AC%E7%82%B9%E8%AF%84%E9%A1%B9%E7%9B%AE%E5%88%9D%E5%A7%8B%E5%8C%96/image-20240228202022415-17096985435601.png"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 黑马点评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo结合主题Matery构建绝美博客</title>
      <link href="/2024/03/06/hexo%E7%BB%93%E5%90%88%E4%B8%BB%E9%A2%98Matery%E6%9E%84%E5%BB%BA%E7%BB%9D%E7%BE%8E%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/03/06/hexo%E7%BB%93%E5%90%88%E4%B8%BB%E9%A2%98Matery%E6%9E%84%E5%BB%BA%E7%BB%9D%E7%BE%8E%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>​之前那个主题既不美观也不好用，我就上网搜了搜hexo的主题，发现了matery这个主题。最吸引我的其实不是它绚丽的色彩，而是它可以搜索文章以及热点图的功能，于是我赶紧搜索了一下如何下载该主题。</p><p>​首先点击以下链接访问位于github上的matery主题项目，根据readme文档操作，需要注意的是在复制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: xxx</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>类似以上形式的内容时，在Typora中如果出现了以下情形，需要将多余的”—“删除</p><p><img src="/../images/hexo%E7%BB%93%E5%90%88%E4%B8%BB%E9%A2%98Matery%E6%9E%84%E5%BB%BA%E7%BB%9D%E7%BE%8E%E5%8D%9A%E5%AE%A2/image-20240305184436062.png"></p><p>我当时就是没有删除，导致每次我执行hexo s时都会报以下错误</p><p><img src="/../images/hexo%E7%BB%93%E5%90%88%E4%B8%BB%E9%A2%98Matery%E6%9E%84%E5%BB%BA%E7%BB%9D%E7%BE%8E%E5%8D%9A%E5%AE%A2/image-20240305184845222.png"></p><p>解决了以上问题后，我又有一个新问题：如何给我的文章分类，这个也很简单(然而当时却花了我不少时间)。按照readme文档的提示，我们在创建文章时，只要在顶部按照格式写上它的信息即可，比如</p><p><img src="/../images/hexo%E7%BB%93%E5%90%88%E4%B8%BB%E9%A2%98Matery%E6%9E%84%E5%BB%BA%E7%BB%9D%E7%BE%8E%E5%8D%9A%E5%AE%A2/image-20240305185152689.png"></p><p>就表示这篇文章名称为：hexo结合主题Matery构建绝美博客</p><p>发表日期为：2024-03-05</p><p>作者为：dch</p><p>位于hexo这个类别下</p><p>标签是hexo和matery</p><p>最后附上搭建好的图片</p><p><img src="/../images/hexo%E7%BB%93%E5%90%88%E4%B8%BB%E9%A2%98Matery%E6%9E%84%E5%BB%BA%E7%BB%9D%E7%BE%8E%E5%8D%9A%E5%AE%A2/image-20240305185437028.png"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> matery </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
